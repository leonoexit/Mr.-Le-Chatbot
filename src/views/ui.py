import streamlit as st
from typing import Callable, Dict, Any
import json
from src.config.settings import (
    PAGE_TITLE,
    PAGE_ICON,
    PAGE_LAYOUT,
    AVAILABLE_MODELS,
    DEFAULT_MODEL,
    DEFAULT_TEMPERATURE,
    DEFAULT_MAX_TOKENS,
    SYSTEM_PROMPTS_FILE
)

def create_copy_button(text: str, key: str):
    """T·∫°o n√∫t copy cho text"""
    if st.button("üìã Copy", key=f"copy_{key}"):
        st.write("ƒê√£ copy!")
        st.session_state["copied_text"] = text

def create_reset_button(message_index: int, on_reset: Callable):
    """T·∫°o n√∫t reset cho message"""
    if st.button("üîÑ Reset", key=f"reset_{message_index}"):
        on_reset(message_index)

def create_chat_ui(chat_instance: Any):
    """T·∫°o giao di·ªán chat ch√≠nh"""
    st.set_page_config(
        page_title=PAGE_TITLE,
        page_icon=PAGE_ICON,
        layout=PAGE_LAYOUT
    )

    # Header
    st.title("ü§ñ Mr. L·ªÖ AI")
    st.markdown("Ch∆∞∆°ng tr√¨nh ƒë∆∞·ª£c t·∫°o b·ªüi Mr. L·ªÖ AI - V·ªõi s·ª± h·ªó tr·ª£ c·ªßa ClaudeAI")

    # Sidebar cho c√†i ƒë·∫∑t v√† qu·∫£n l√Ω system prompts
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Qu·∫£n l√Ω System Prompts
        st.subheader("ü§ñ Qu·∫£n l√Ω Chatbots")
        
        # ƒê·ªçc system prompts t·ª´ file
        try:
            with open(SYSTEM_PROMPTS_FILE, 'r', encoding='utf-8') as f:
                system_prompts = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            system_prompts = {
                "Default": "You are Mr. 'L·ªÖ ƒë·∫πp trai' a helpful AI assistant. Respond in Vietnamese."
            }

        # Ch·ªçn chatbot
        selected_bot = st.selectbox(
            "Ch·ªçn Chatbot",
            options=list(system_prompts.keys()),
            key="selected_bot"
        )

        # Hi·ªÉn th·ªã v√† ch·ªânh s·ª≠a system prompt
        current_prompt = st.text_area(
            "System Prompt",
            value=system_prompts[selected_bot],
            height=100,
            key="current_prompt"
        )

        # N√∫t l∆∞u thay ƒë·ªïi
        if st.button("üíæ L∆∞u thay ƒë·ªïi"):
            system_prompts[selected_bot] = current_prompt
            with open(SYSTEM_PROMPTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(system_prompts, f, ensure_ascii=False, indent=2)
            st.success("ƒê√£ l∆∞u thay ƒë·ªïi!")

        # T·∫°o chatbot m·ªõi
        st.subheader("‚ûï T·∫°o Chatbot m·ªõi")
        new_bot_name = st.text_input("T√™n Chatbot m·ªõi")
        new_bot_prompt = st.text_area("System Prompt m·ªõi", height=100)
        
        if st.button("T·∫°o m·ªõi") and new_bot_name and new_bot_prompt:
            system_prompts[new_bot_name] = new_bot_prompt
            with open(SYSTEM_PROMPTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(system_prompts, f, ensure_ascii=False, indent=2)
            st.success(f"ƒê√£ t·∫°o chatbot m·ªõi: {new_bot_name}")
            st.experimental_rerun()

        # C√°c c√†i ƒë·∫∑t kh√°c
        st.subheader("üõ†Ô∏è C√†i ƒë·∫∑t Model")
        
        # Th√™m tooltip gi·∫£i th√≠ch v·ªÅ c√°c model
        model = st.selectbox(
            "Model",
            options=AVAILABLE_MODELS,
            index=AVAILABLE_MODELS.index(DEFAULT_MODEL),
            help="""
            - claude-3.5-sonnet-2024-10-22: Model m·ªõi nh·∫•t v√† m·∫°nh nh·∫•t, khuy√™n d√πng cho h·∫ßu h·∫øt t√°c v·ª•
            - claude-3.5-sonnet-2024-06-20: Model ·ªïn ƒë·ªãnh, ph√π h·ª£p cho c√°c t√°c v·ª• y√™u c·∫ßu ƒë·ªô tin c·∫≠y cao
            - claude-3.5-haiku: Model nhanh v√† nh·∫π, ph√π h·ª£p cho c√°c t√°c v·ª• ƒë∆°n gi·∫£n c·∫ßn ph·∫£n h·ªìi nhanh
            """
        )
        
        temperature = st.slider(
            "Temperature",
            min_value=0.0,
            max_value=1.0,
            value=DEFAULT_TEMPERATURE,
            step=0.1,
            help="ƒêi·ªÅu ch·ªânh ƒë·ªô s√°ng t·∫°o trong c√¢u tr·∫£ l·ªùi (0: √≠t s√°ng t·∫°o, 1: nhi·ªÅu s√°ng t·∫°o)"
        )
        
        max_tokens = st.slider(
            "Max Tokens",
            min_value=100,
            max_value=4000,
            value=DEFAULT_MAX_TOKENS,
            step=100,
            help="Gi·ªõi h·∫°n ƒë·ªô d√†i t·ªëi ƒëa c·ªßa c√¢u tr·∫£ l·ªùi"
        )
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
            st.session_state.chat_history = []
            st.experimental_rerun()

    # Main chat area
    chat_container = st.container()
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat t·ª´ session state
    with chat_container:
        for idx, message in enumerate(st.session_state.chat_history):
            with st.chat_message(message["role"], avatar="ü§ñ" if message["role"] == "assistant" else None):
                st.write(message["content"])
                
                # Th√™m n√∫t copy cho response c·ªßa assistant
                if message["role"] == "assistant":
                    create_copy_button(message["content"], f"copy_{idx}")
                
                # Th√™m n√∫t reset cho message c·ªßa user
                if message["role"] == "user":
                    create_reset_button(idx, lambda i: chat_instance.reset_message(i))

    # Input area
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")
    
    if user_input:
        response = chat_instance.handle_message(
            message=user_input,
            model=model,
            temperature=temperature,
            max_tokens=max_tokens,
            system=system_prompts[selected_bot]
        )
        
        # Hi·ªÉn th·ªã tin nh·∫Øn m·ªõi
        st.chat_message("user").write(user_input)
        with st.chat_message("assistant", avatar="ü§ñ"):
            st.write(response)
            create_copy_button(response, f"copy_new")
